"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = 0,
"ap.bp.op" = 0,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
length(sim.B)
qplot(x=1:64,y=sim.B,xlab="Index",ylab="Coefficient",size=5)+theme(text=element_text(size=20),legend.position="none")
1:64
qplot(x=1:63,y=sim.B,xlab="Index",ylab="Coefficient",size=5)+theme(text=element_text(size=20),legend.position="none")
#Model coefficients
sim.B = c("intercept" = -0.098,
"ae" = 0.47,
"ap" = 0,
"aa" = 0,
"be" = 0.425,
"bp" = -0.069,
"ba" = -0.106,
"oe" = 0.055,
"op" = 0,
"oa" = 0,
"ae.be" = 0.048,
"ae.bp" = -0.038,
"ae.ba" = 0,
"ae.oe" = 0,
"ae.op" = 0,
"ae.oa" = 0,
"ap.be" = 0,
"ap.bp" = 0.027,
"ap.ba" = 0,
"ap.oe" = 0,
"ap.op" = 0,
"ap.oa" = 0,
"aa.be" = 0.048,
"aa.bp" = 0,
"aa.ba" = 0 ,
"aa.oe" = 0,
"aa.op" = 0,
"aa.oa" = 0,
"be.oe" = 0,
"be.op" = -0.058,
"be.oa" = 0,
"bp.oe" = -0.07,
"bp.op" = 0,
"bp.oa" = 0,
"ba.oe" = 0,
"ba.op" = 0,
"ba.oa" = 0,
"ae.be.oe" = 0,
"ae.be.op" = 0,
"ae.be.oa" = 0,
"ae.bp.oe" = 0,
"ae.bp.op" = 0,
"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = 0,
"ap.bp.op" = 0,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
qplot(x=1:64,y=sim.B,xlab="Index",ylab="Coefficient",size=5)+theme(text=element_text(size=20),legend.position="none")
data.frame(1:64,sim.B)
coefficients <- data.frame(1:64,sim.B)
?geom_points
?geom_point
ggplot(coefficients, aes(x = x1.64, y = sim.B, label=rownames(coefficients))) + geom_point() +theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(1:64,sim.B)
ggplot(coefficients, aes(x = x1.64, y = sim.B, label=rownames(coefficients))) + geom_point() +theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
head(coefficients)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients))) + geom_point() +theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5)) + geom_point() + geom_text() + theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text() + theme(text=element_text(size=20),legend.position="none")
?geom_text
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text() + theme(text=element_text(size=20),legend.position="none")
?geom_text
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 12) + theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 8) + theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 6) + theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 6, y = sim.B + 0.01) + xlim(c(-5,70)) + theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 6, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=20),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 5, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=20),legend.position="none")
#################
# LOAD PACKAGES #
#################
require(mvtnorm) #for sampling from multivariate normal
require(ggplot2) #for plotting
require(BMA) #Adrian Raftery's Bayesian Model Averaging Package
require(dplyr) #for transforming data
require(magrittr) #for coding semantics
require(corrplot)
require(randomForest)
set.seed(83749724) #true model
###################################
# TRUE MODEL FOR eae              #
# THE IN-CONTEXT ACTOR EVALUATION #
###################################
#Model coefficients
sim.B = c("intercept" = -0.098,
"ae" = 0.47,
"ap" = 0,
"aa" = 0,
"be" = 0.425,
"bp" = -0.069,
"ba" = -0.106,
"oe" = 0.055,
"op" = 0,
"oa" = 0,
"ae.be" = 0.048,
"ae.bp" = -0.038,
"ae.ba" = 0,
"ae.oe" = 0,
"ae.op" = 0,
"ae.oa" = 0,
"ap.be" = 0,
"ap.bp" = 0.027,
"ap.ba" = 0,
"ap.oe" = 0,
"ap.op" = 0,
"ap.oa" = 0,
"aa.be" = 0.048,
"aa.bp" = 0,
"aa.ba" = 0 ,
"aa.oe" = 0,
"aa.op" = 0,
"aa.oa" = 0,
"be.oe" = 0,
"be.op" = -0.058,
"be.oa" = 0,
"bp.oe" = -0.07,
"bp.op" = 0,
"bp.oa" = 0,
"ba.oe" = 0,
"ba.op" = 0,
"ba.oa" = 0,
"ae.be.oe" = 0,
"ae.be.op" = 0,
"ae.be.oa" = 0,
"ae.bp.oe" = 0,
"ae.bp.op" = 0,
"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = 0,
"ap.bp.op" = 0,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 5, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=20),legend.position="none")
############################
# SIMULATED DATA FROM MODEL#
############################
#I want the data generated from the true model to have characteristics similar to the duke10 data
duke10 <- read.csv("~/GitHub/affectcontroltheory/Data Merged by Event/duke10_by_event.csv")
corrplot(cor(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
#covariate means
X.mean=matrix(colMeans(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
#covariate SD
X.var=var(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")])
#simulated covariates
sim.X1= rmvnorm(1000,X.mean,X.var)
colnames(sim.X1) <- colnames(duke10[,10:18])
# TWO-WAY CROSS WORD INTERACTIONS
sim.X1.interaction = as.matrix(t(apply(sim.X1,1,combn,2,prod)))
colnames(sim.X1.interaction)=paste(combn(names(duke10[,10:18]),2,paste,collapse="."),sep="")
sim.X1.interaction.2=sim.X1.interaction[,c(-1,-2,-9,-22,-23,-27,-34,-35,-36)]
# THREE WAY CROSS WORD INTERACTIONS
#first, generate all three-way interaction names
sim.X1.3.names.full=paste(combn(names(duke10[,10:18]),3,paste,collapse="."),sep="")
#for-loop looks through all the interaction names and stores only those which are cross-word interactions
sim.X1.3.names = matrix(nrow = 84, ncol =2)
for (i in 1:length(sim.X1.3.names.full)){
interaction=sim.X1.3.names.full[i]
words = c(substr(interaction,1,1),substr(interaction,4,4),substr(interaction,7,7))
if(!is.na(sum(pmatch(c("a","b","o"),words)))){
sim.X1.3.names[i,] <- c(interaction,TRUE)
print(interaction)
}
else{
sim.X1.3.names[i,] <- c("",FALSE)
}
}
#then, calculate the interactions and use the names to select which ones to keep
sim.X1.interaction.3 <- as.matrix(t(apply(sim.X1,1,combn,3,prod)))[,sim.X1.3.names[,2]=="TRUE"]
colnames(sim.X1.interaction.3)=sim.X1.3.names[which(sim.X1.3.names[,2]=="TRUE"),1]
# COMBINE TWO-WAY AND THREE-WAY INTERACTIONS
sim.X1.design.matrix = (cbind(1,sim.X1,sim.X1.interaction.2,sim.X1.interaction.3))
#let the sd of the random error come from a lm on the real data
model.summary <- lm(eae ~. , data = duke10[,c("eae", "ae","ap","aa","be","bp","ba","oe","op","oa")]) %>% summary()
Y.sd <- model.summary$sigma
#GENERATE FAKE DATA FROM MODEL
#here we add intercept
sim.Y=matrix(rmvnorm(1,sim.X1.design.matrix%*%sim.B,diag(Y.sd^2,1000)),ncol=1)
# COMPARE SIMULATED DATA WITH REAL DATA, actor evaluation in-event
sd(sim.Y)
sd(duke10$eae)
#minus the intercept
sim.X1.design.dataframe <- data.frame(sim.X1.design.matrix)
corrplot(cor(sim.X1.design.dataframe[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
corrplot(cor(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
####################
# CONDUCT ANALYSIS #
####################
sim.data <- data.frame(cbind(eae=sim.Y,sim.X1.design.matrix))
names(sim.data) <- c("response","intercept",names(sim.data)[c(-1,-2)])
#sample 150 observations for training set
select.training.set <- sample(1:1000,150)
#train.data, a training set consisting of 150 observations
train.data <- sim.data[select.training.set,]
#test.data, a test set consisting of 850 observations
test.data <- sim.data[-select.training.set,]
#OLS REGRESSION
sim.model.ols = lm(response~.,data=train.data[,-2])
summary(sim.model.ols)
#STEPWISE REGRESSION
sim.model.stepwise = step(sim.model.ols)
summary(sim.model.stepwise)
#BAYESIAN MODEL AVERAGING
#unfortunately can't specify prior probability
sim.model.BMA <- bicreg(x = train.data[,c(-1,-2)], y = train.data[,"response"], maxCol=30)
summary(sim.model.BMA)
plot(sim.model.BMA)
#select the main factors and get medians for the columns
train.data.main.factors <- select(train.data,response,ae,ap,aa,be,bp,ba,oe,op,oa)
mainFactorMedians <- select(train.data.main.factors,ae,ap,aa,be,bp,ba,oe,op,oa)%>%apply(MARGIN=2, FUN=median)
#then, dichotomize these main facctors
#note, mutation written out manually for clarity
train.data.dichotomized <-
mutate(train.data.main.factors,
ae = ae > mainFactorMedians["ae"],
ap = ap > mainFactorMedians["ap"],
aa = aa > mainFactorMedians["aa"],
be = be > mainFactorMedians["be"],
bp = bp > mainFactorMedians["bp"],
ba = ba > mainFactorMedians["ba"],
oe = oe > mainFactorMedians["oe"],
op = op > mainFactorMedians["op"],
oa = oa > mainFactorMedians["oa"],)
head(train.data.dichotomized)
#generate interaction terms from names in the train.data
#requires \\., regular expression for "."
formula <- gsub("\\.","*",names(train.data)[c(-1,-2)]) %>% paste(collapse = "+")
formula
#conduct anova
anova.model <- aov(response ~ ae+ap+aa+be+bp+ba+oe+op+oa+ae*be+ae*bp+ae*ba+ae*oe+ae*op+ae*oa+ap*be+ap*bp+ap*ba+ap*oe+ap*op+ap*oa+aa*be+aa*bp+aa*ba+aa*oe+aa*op+aa*oa+be*oe+be*op+be*oa+bp*oe+bp*op+bp*oa+ba*oe+ba*op+ba*oa+ae*be*oe+ae*be*op+ae*be*oa+ae*bp*oe+ae*bp*op+ae*bp*oa+ae*ba*oe+ae*ba*op+ae*ba*oa+ap*be*oe+ap*be*op+ap*be*oa+ap*bp*oe+ap*bp*op+ap*bp*oa+ap*ba*oe+ap*ba*op+ap*ba*oa+aa*be*oe+aa*be*op+aa*be*oa+aa*bp*oe+aa*bp*op+aa*bp*oa+aa*ba*oe+aa*ba*op+aa*ba*oa, data = train.data.dichotomized)
summary(anova.model)
sim.model.ols = lm(response~.,data=train.data[,-2])
summary(sim.model.ols)
#STEPWISE REGRESSION
sim.model.stepwise = step(sim.model.ols)
summary(sim.model.stepwise)
sd(sim.Y)
sd(duke10$eae)
#minus the intercept
sim.X1.design.dataframe <- data.frame(sim.X1.design.matrix)
corrplot(cor(sim.X1.design.dataframe[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
corrplot(cor(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
#unfortunately can't specify prior probability
sim.model.BMA <- bicreg(x = train.data[,c(-1,-2)], y = train.data[,"response"], maxCol=30)
summary(sim.model.BMA)
plot(sim.model.BMA)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 5, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=20),legend.position="none")
summary(sim.model.BMA)
anova.model <- aov(response ~ ae+ap+aa+be+bp+ba+oe+op+oa+ae*be+ae*bp+ae*ba+ae*oe+ae*op+ae*oa+ap*be+ap*bp+ap*ba+ap*oe+ap*op+ap*oa+aa*be+aa*bp+aa*ba+aa*oe+aa*op+aa*oa+be*oe+be*op+be*oa+bp*oe+bp*op+bp*oa+ba*oe+ba*op+ba*oa+ae*be*oe+ae*be*op+ae*be*oa+ae*bp*oe+ae*bp*op+ae*bp*oa+ae*ba*oe+ae*ba*op+ae*ba*oa+ap*be*oe+ap*be*op+ap*be*oa+ap*bp*oe+ap*bp*op+ap*bp*oa+ap*ba*oe+ap*ba*op+ap*ba*oa+aa*be*oe+aa*be*op+aa*be*oa+aa*bp*oe+aa*bp*op+aa*bp*oa+aa*ba*oe+aa*ba*op+aa*ba*oa, data = train.data.dichotomized)
summary(anova.model)
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 5, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=12),legend.position="none")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 5, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=14),legend.position="none") + ylab("Coefficient")
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 5, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=14),legend.position="none") + ylab("Coefficient")
#################
# LOAD PACKAGES #
#################
require(mvtnorm) #for sampling from multivariate normal
require(ggplot2) #for plotting
require(BMA) #Adrian Raftery's Bayesian Model Averaging Package
require(dplyr) #for transforming data
require(magrittr) #for coding semantics
require(corrplot)
require(randomForest)
set.seed(83749724) #true model
###################################
# TRUE MODEL FOR eae              #
# THE IN-CONTEXT ACTOR EVALUATION #
###################################
#Model coefficients
sim.B = c("intercept" = -0.098,
"ae" = 0.47,
"ap" = 0,
"aa" = 0,
"be" = 0.425,
"bp" = -0.069,
"ba" = -0.106,
"oe" = 0.055,
"op" = 0,
"oa" = 0,
"ae.be" = 0.048,
"ae.bp" = -0.038,
"ae.ba" = 0,
"ae.oe" = 0,
"ae.op" = 0,
"ae.oa" = 0,
"ap.be" = 0,
"ap.bp" = 0,
"ap.ba" = 0,
"ap.oe" = 0,
"ap.op" = 0,
"ap.oa" = 0,
"aa.be" = 0.048,
"aa.bp" = 0,
"aa.ba" = 0 ,
"aa.oe" = 0,
"aa.op" = 0,
"aa.oa" = 0,
"be.oe" = 0,
"be.op" = -0.058,
"be.oa" = 0,
"bp.oe" = -0.07,
"bp.op" = 0,
"bp.oa" = 0,
"ba.oe" = 0,
"ba.op" = 0,
"ba.oa" = 0,
"ae.be.oe" = 0,
"ae.be.op" = 0,
"ae.be.oa" = 0,
"ae.bp.oe" = 0,
"ae.bp.op" = 0,
"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = 0,
"ap.bp.op" = 0,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
coefficients <- data.frame(index = 1:64,sim.B)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 5, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=14),legend.position="none") + ylab("Coefficient")
############################
# SIMULATED DATA FROM MODEL#
############################
#I want the data generated from the true model to have characteristics similar to the duke10 data
duke10 <- read.csv("~/GitHub/affectcontroltheory/Data Merged by Event/duke10_by_event.csv")
corrplot(cor(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
#covariate means
X.mean=matrix(colMeans(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
#covariate SD
X.var=var(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")])
#simulated covariates
sim.X1= rmvnorm(1000,X.mean,X.var)
colnames(sim.X1) <- colnames(duke10[,10:18])
# TWO-WAY CROSS WORD INTERACTIONS
sim.X1.interaction = as.matrix(t(apply(sim.X1,1,combn,2,prod)))
colnames(sim.X1.interaction)=paste(combn(names(duke10[,10:18]),2,paste,collapse="."),sep="")
sim.X1.interaction.2=sim.X1.interaction[,c(-1,-2,-9,-22,-23,-27,-34,-35,-36)]
# THREE WAY CROSS WORD INTERACTIONS
#first, generate all three-way interaction names
sim.X1.3.names.full=paste(combn(names(duke10[,10:18]),3,paste,collapse="."),sep="")
#for-loop looks through all the interaction names and stores only those which are cross-word interactions
sim.X1.3.names = matrix(nrow = 84, ncol =2)
for (i in 1:length(sim.X1.3.names.full)){
interaction=sim.X1.3.names.full[i]
words = c(substr(interaction,1,1),substr(interaction,4,4),substr(interaction,7,7))
if(!is.na(sum(pmatch(c("a","b","o"),words)))){
sim.X1.3.names[i,] <- c(interaction,TRUE)
print(interaction)
}
else{
sim.X1.3.names[i,] <- c("",FALSE)
}
}
#then, calculate the interactions and use the names to select which ones to keep
sim.X1.interaction.3 <- as.matrix(t(apply(sim.X1,1,combn,3,prod)))[,sim.X1.3.names[,2]=="TRUE"]
colnames(sim.X1.interaction.3)=sim.X1.3.names[which(sim.X1.3.names[,2]=="TRUE"),1]
# COMBINE TWO-WAY AND THREE-WAY INTERACTIONS
sim.X1.design.matrix = (cbind(1,sim.X1,sim.X1.interaction.2,sim.X1.interaction.3))
#let the sd of the random error come from a lm on the real data
model.summary <- lm(eae ~. , data = duke10[,c("eae", "ae","ap","aa","be","bp","ba","oe","op","oa")]) %>% summary()
Y.sd <- model.summary$sigma
#GENERATE FAKE DATA FROM MODEL
#here we add intercept
sim.Y=matrix(rmvnorm(1,sim.X1.design.matrix%*%sim.B,diag(Y.sd^2,1000)),ncol=1)
# COMPARE SIMULATED DATA WITH REAL DATA, actor evaluation in-event
sd(sim.Y)
sd(duke10$eae)
#minus the intercept
sim.X1.design.dataframe <- data.frame(sim.X1.design.matrix)
corrplot(cor(sim.X1.design.dataframe[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
corrplot(cor(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
####################
# CONDUCT ANALYSIS #
####################
sim.data <- data.frame(cbind(eae=sim.Y,sim.X1.design.matrix))
names(sim.data) <- c("response","intercept",names(sim.data)[c(-1,-2)])
#sample 150 observations for training set
select.training.set <- sample(1:1000,150)
#train.data, a training set consisting of 150 observations
train.data <- sim.data[select.training.set,]
#test.data, a test set consisting of 850 observations
test.data <- sim.data[-select.training.set,]
#OLS REGRESSION
sim.model.ols = lm(response~.,data=train.data[,-2])
summary(sim.model.ols)
#STEPWISE REGRESSION
sim.model.stepwise = step(sim.model.ols)
summary(sim.model.stepwise)
#BAYESIAN MODEL AVERAGING
#unfortunately can't specify prior probability
sim.model.BMA <- bicreg(x = train.data[,c(-1,-2)], y = train.data[,"response"], maxCol=30)
summary(sim.model.BMA)
#HEISE ANOVA ANALYSIS
head(train.data)
#select the main factors and get medians for the columns
train.data.main.factors <- select(train.data,response,ae,ap,aa,be,bp,ba,oe,op,oa)
mainFactorMedians <- select(train.data.main.factors,ae,ap,aa,be,bp,ba,oe,op,oa)%>%apply(MARGIN=2, FUN=median)
#then, dichotomize these main facctors
#note, mutation written out manually for clarity
train.data.dichotomized <-
mutate(train.data.main.factors,
ae = ae > mainFactorMedians["ae"],
ap = ap > mainFactorMedians["ap"],
aa = aa > mainFactorMedians["aa"],
be = be > mainFactorMedians["be"],
bp = bp > mainFactorMedians["bp"],
ba = ba > mainFactorMedians["ba"],
oe = oe > mainFactorMedians["oe"],
op = op > mainFactorMedians["op"],
oa = oa > mainFactorMedians["oa"],)
head(train.data.dichotomized)
#generate interaction terms from names in the train.data
#requires \\., regular expression for "."
formula <- gsub("\\.","*",names(train.data)[c(-1,-2)]) %>% paste(collapse = "+")
formula
#conduct anova
anova.model <- aov(response ~ ae+ap+aa+be+bp+ba+oe+op+oa+ae*be+ae*bp+ae*ba+ae*oe+ae*op+ae*oa+ap*be+ap*bp+ap*ba+ap*oe+ap*op+ap*oa+aa*be+aa*bp+aa*ba+aa*oe+aa*op+aa*oa+be*oe+be*op+be*oa+bp*oe+bp*op+bp*oa+ba*oe+ba*op+ba*oa+ae*be*oe+ae*be*op+ae*be*oa+ae*bp*oe+ae*bp*op+ae*bp*oa+ae*ba*oe+ae*ba*op+ae*ba*oa+ap*be*oe+ap*be*op+ap*be*oa+ap*bp*oe+ap*bp*op+ap*bp*oa+ap*ba*oe+ap*ba*op+ap*ba*oa+aa*be*oe+aa*be*op+aa*be*oa+aa*bp*oe+aa*bp*op+aa*bp*oa+aa*ba*oe+aa*ba*op+aa*ba*oa, data = train.data.dichotomized)
summary(anova.model)
#unfortunately can't specify prior probability
sim.model.BMA <- bicreg(x = train.data[,c(-1,-2)], y = train.data[,"response"], maxCol=30)
summary(sim.model.BMA)
ggplot(coefficients, aes(x = index, y = sim.B, label=rownames(coefficients), size = 5, alpha = 0.4)) + geom_point() + geom_text(size = 5, y = sim.B + 0.015) + xlim(c(-5,70)) + theme(text=element_text(size=14),legend.position="none") + ylab("Coefficient")
anova.model <- aov(response ~ ae+ap+aa+be+bp+ba+oe+op+oa+ae*be+ae*bp+ae*ba+ae*oe+ae*op+ae*oa+ap*be+ap*bp+ap*ba+ap*oe+ap*op+ap*oa+aa*be+aa*bp+aa*ba+aa*oe+aa*op+aa*oa+be*oe+be*op+be*oa+bp*oe+bp*op+bp*oa+ba*oe+ba*op+ba*oa+ae*be*oe+ae*be*op+ae*be*oa+ae*bp*oe+ae*bp*op+ae*bp*oa+ae*ba*oe+ae*ba*op+ae*ba*oa+ap*be*oe+ap*be*op+ap*be*oa+ap*bp*oe+ap*bp*op+ap*bp*oa+ap*ba*oe+ap*ba*op+ap*ba*oa+aa*be*oe+aa*be*op+aa*be*oa+aa*bp*oe+aa*bp*op+aa*bp*oa+aa*ba*oe+aa*ba*op+aa*ba*oa, data = train.data.dichotomized)
summary(anova.model)
