"be" = 0.425,
"bp" = -0.069,
"ba" = -0.106,
"oe" = 0.055,
"op" = 0,
"oa" = 0,
"ae.be" = 0.048,
"ae.bp" = -0.038,
"ae.ba" = 0,
"ae.oe" = 0,
"ae.op" = 0,
"ae.oa" = 0,
"ap.be" = 0,
"ap.bp" = 0,
"ap.ba" = 0,
"ap.oe" = 0,
"ap.op" = 0,
"ap.oa" = 0,
"aa.be" = 0.048,
"aa.bp" = 0,
"aa.ba" = 0 ,
"aa.oe" = 0,
"aa.op" = 0,
"aa.oa" = 0,
"be.oe" = 0,
"be.op" = -0.058,
"be.oa" = 0,
"bp.oe" = -0.07,
"bp.op" = 0,
"bp.oa" = 0,
"ba.oe" = 0,
"ba.op" = 0,
"ba.oa" = 0,
"ae.be.oe" = 0,
"ae.be.op" = 0,
"ae.be.oa" = 0,
"ae.bp.oe" = 0,
"ae.bp.op" = 0,
"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = -0.05,
"ap.bp.op" = 0,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0.05,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
stuff <- runSimulation(sim.B, 1000, 1000)
identified <- stuff$var.iden
predicted <- stuff$pred.error
hist(predicted$stepwise,main="Predictive Error", xlim=c(-4,4))
hist(predicted$anova,main="Predictive Error", xlim=c(-4,4))
hist(predicted$bma,main="Predictive Error", xlim=c(-4,4))
hist(predicted$bms,main="Predictive Error", xlim=c(-4,4))
mean(predicted$stepwise^2)
mean(predicted$anova^2)
mean(predicted$bma^2)
mean(predicted$bms^2)
checker(identified$stepwise, identified$truth)
checker(identified$anova, identified$truth)
checker(identified$bma, identified$truth)
checker(identified$bms, identified$truth)
source('~/.active-rstudio-document', echo=TRUE)
SIMULATIONS = 10;
resultsMatrix = as.data.frame(matrix(NA, SIMULATIONS, 16))
names(resultsMatrix) = c("stepwiseTruePositive", "stepwiseFalsePositive", "stepwiseFalseNegative", "stepwiseTrueNegative",
"anovaTruePositive", "anovaFalsePositive", "anovaFalseNegative", "anovaTrueNegative",
"bmaTruePositive", "bmaFalsePositive", "bmaFalseNegative", "bmaTrueNegative",
"bmsTruePositive", "bmsFalsePositive", "bmsFalseNegative", "bmsTrueNegative")
for (i in 1:SIMULATIONS){
simulation <- runSimulation(simulation.model.eae.main, trainSize=200, testSize=200)
simulationIdentified <- simulation$var.iden
storeResults <- c(checker(simulationIdentified$stepwise, simulationIdentified$truth),checker(simulationIdentified$anova, simulationIdentified$truth),checker(simulationIdentified$bma, simulationIdentified$truth),checker(simulationIdentified$bms, simulationIdentified$truth))
resultsMatrix[i,] <- storeResults
}
resultsMatrix
colMeans(resultsMatrix)
colMeans(resultsMatrix)[1:4]
colMeans(resultsMatrix)[4:4]
colMeans(resultsMatrix)[1:4]
colMeans(resultsMatrix)[5:8]
colMeans(resultsMatrix)[9:12]
colMeans(resultsMatrix)[13:16]
require(ggplot2)
truePositive <- as.data.frame(cbind("stepwise" = resultsMatrix$stepwiseTruePositive,
"anova" = resultsMatrix$anovaTruePositive,
"bma" = resultsMatrix$bmaTruePositive,
"bms" = resultsMatrix$bmsTruePositive))
truePositive
truePositive <- melt(truePositive)
require(reshape2)
truePositive <- melt(truePositive)
truePositive
p <- ggplot(truePositive, aes(x = value, fill = factor(variable))) + geom_density
p <- ggplot(truePositive, aes(x = value, fill = factor(variable))) + geom_density()
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_density()
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_density()
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram()
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable), fill = "none")) + geom_histogram()
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable), fill = NA)) + geom_histogram()
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable), fill = "white")) + geom_histogram()
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram()
p
p <- ggplot(truePositive, aes(x = value, fill="white", color = factor(variable))) + geom_histogram()
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white")
p
SIMULATIONS = 100;
resultsMatrix = as.data.frame(matrix(NA, SIMULATIONS, 16))
names(resultsMatrix) = c("stepwiseTruePositive", "stepwiseFalsePositive", "stepwiseFalseNegative", "stepwiseTrueNegative",
"anovaTruePositive", "anovaFalsePositive", "anovaFalseNegative", "anovaTrueNegative",
"bmaTruePositive", "bmaFalsePositive", "bmaFalseNegative", "bmaTrueNegative",
"bmsTruePositive", "bmsFalsePositive", "bmsFalseNegative", "bmsTrueNegative")
for (i in 1:SIMULATIONS){
simulation <- runSimulation(simulation.model.eae.main, trainSize=200, testSize=200)
simulationIdentified <- simulation$var.iden
storeResults <- c(checker(simulationIdentified$stepwise, simulationIdentified$truth),checker(simulationIdentified$anova, simulationIdentified$truth),checker(simulationIdentified$bma, simulationIdentified$truth),checker(simulationIdentified$bms, simulationIdentified$truth))
resultsMatrix[i,] <- storeResults
}
resultsMatrix
resultsMatrix <- resultsMatrix[1:98,]
colMeans(resultsMatrix)[1:4]
colMeans(resultsMatrix)[5:8]
colMeans(resultsMatrix)[9:12]
colMeans(resultsMatrix)[13:16]
truePositive <- as.data.frame(cbind("stepwise" = resultsMatrix$stepwiseTruePositive,
"anova" = resultsMatrix$anovaTruePositive,
"bma" = resultsMatrix$bmaTruePositive,
"bms" = resultsMatrix$bmsTruePositive))
truePositive <- melt(truePositive)
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white")
p
head(resultsMatrix)
require(dplyr)
plotData <- melt(plotData)
plotData <- melt(resultsMatrix)
"bms"%in%"bmsTruePositive"
grep("bms","bmsTruePositive")
?grep
grep("bma","bmsTruePositive")
grep(c("stepwise","anova","bma","bms"),"bmsTruePositive")
thingstring = c("bmsTruePositive", "bmaTruePositive")
grep(substr(thingstring,1,3),c("stepwise","anova","bma","bms"))
?sapply
func <- function(thingstring){
return(grep(substr(thingstring,1,3),c("stepwise","anova","bma","bms")))
}
sapply(thingstring, FUN = func)
getMethod <- function(variableName){
index = grep(substr(variableName,1,3),c("stepwise","anova","bma","bms"))
return(c("stepwise","anova","bma","bms")[index])
}
head(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod))
head(plotData)
tail(plotDAta)
tail(plotData)
head(resultsMatrix)
getType <- function(variableName){
index = grep(substr(variableName,1,3),c("TruePositive","FalsePositive","FalseNegative","TrueNegative"))
return(c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[index])
}
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(type = sapply(plotData$variable, FUN = getType))
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod))
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(type = sapply(plotData$variable, FUN = getType))
plotData <- plotData %>% mutate(type = sapply(plotData$variable, FUN = getType))
getStat <- function(variableName){
index = grep(substr(variableName,1,3),c("TruePositive","FalsePositive","FalseNegative","TrueNegative"))
return(c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[index])
}
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(stat = sapply(plotData$variable, FUN = getType))
?substr
getStat <- function(variableName){
index = grep(substr(variableName,3,nchar(variableName)),c("TruePositive","FalsePositive","FalseNegative","TrueNegative"))
return(c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[index])
}
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(stat = sapply(plotData$variable, FUN = getType))
plotData$variable
levels(plotData)
levels(plotData$variable)
levels(plotData$variable)[1]
substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1]))
substr(levels(plotData$variable)[1],2,nchar(levels(plotData$variable)[1]))
substr(levels(plotData$variable)[1],1,nchar(levels(plotData$variable)[1]))
substr(levels(plotData$variable)[1],1,nchar(levels(plotData$variable)[1]))
substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1]))
grep(substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1])),c("TruePositive","FalsePositive","FalseNegative","TrueNegative"))
?grep
"TruePositive"%in%substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1]))
pmatch(substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1])),c("TruePositive","FalsePositive","FalseNegative","TrueNegative"))
pmatch(c("TruePositive","FalsePositive","FalseNegative","TrueNegative"),substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1])))
match(substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1])),c("TruePositive","FalsePositive","FalseNegative","TrueNegative"))
charmatch(substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1])),c("TruePositive","FalsePositive","FalseNegative","TrueNegative"))
charmatch(c("TruePositive","FalsePositive","FalseNegative","TrueNegative"),substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1])))
grepl(c("TruePositive","FalsePositive","FalseNegative","TrueNegative"),substr(levels(plotData$variable)[1],3,nchar(levels(plotData$variable)[1])))
?grepl
getStat <- function(variableName){
name = substr(variableName,3,nchar(variableName))
select = c(grepl("TruePositive", name), grepl("FalsePositive", name), grepl("TrueNegative", name), grepl("TrueNegative", name))
return(c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[select])
}
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(stat = sapply(plotData$variable, FUN = getType))
?selet
c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[c(TRUE,FALSE,FALSE,FALSE)]
plotData$variable[1]
getStat(plotData$variable[1])
getStat <- function(variableName){
name = substr(variableName,3,nchar(as.character(variableName)))
select = c(grepl("TruePositive", name), grepl("FalsePositive", name), grepl("TrueNegative", name), grepl("TrueNegative", name))
return(c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[select])
}
getStat(plotData$variable[1])
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(stat = sapply(plotData$variable, FUN = getType))
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod))
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(stat = sapply(plotData$variable, FUN = getStat))
getStat <- function(variableName){
name = substr(variableName,3,nchar(as.character(variableName)))
select = c(grepl("TruePositive", name), grepl("FalsePositive", name), grepl("TrueNegative", name), grepl("TrueNegative", name))
return(c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[select])
}
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(stat = sapply(plotData$variable, FUN = getStat))
getStat(plotData$variable[1])
sapply(plotData$variable, FUN = getMethod)
factor(sapply(plotData$variable, FUN = getMethod))
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(stat = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(stat = as.factor(sapply(plotData$variable, FUN = getStat)))
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = sapply(plotData$variable, FUN = getStat))
install.packages("dplyr")
install.packages("dplyr")
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = sapply(plotData$variable, FUN = getStat))
require(ggplot2)
require(reshape2)
require(dplyr)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = sapply(plotData$variable, FUN = getStat))
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = sapply(plotData$variable, FUN = getMethod))
sapply(plotData$variable, FUN = getMethod)
sapply(plotData$variable, FUN = getStat)
getStat <- function(variableName){
name = substr(variableName,3,nchar(as.character(variableName)))
select = c(grepl("TruePositive", name), grepl("FalsePositive", name), grepl("FalseNegative", name), grepl("TrueNegative", name))
return(c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[select])
}
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = sapply(plotData$variable, FUN = getStat))
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white") + facet_grid(. ~ statType)
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white")
p
head(plotData)
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white") + facet_grid(. ~ factor(statType) )
p
summary(plotData$statType)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white") + facet_grid(. ~statType)
p
summary(plotData$statType)
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white") + facet_grid(. ~statType, scales = "free")
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white") + facet_grid(.~statType)
p
plotData
statType
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white") +
facet_grid(. ~ statType)
p
p <- ggplot(truePositive, aes(x = value, color = factor(variable))) + geom_histogram(fill="white")
p + facet_grid(. ~ statType)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
p + facet_grid(. ~ cyl)
mtcars
p <- ggplot(plotData, aes(x = value, color = factor(variable))) + geom_histogram(fill="white")
p + facet_grid(. ~ statType)
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(fill="white")
p + facet_grid(. ~ statType)
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=..density..),fill="white")
p + facet_grid(. ~ statType)
q <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_density(fill="white")
q + facet_grid(. ~ statType)
q <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_density(fill="white")
q + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=..density..),fill="white")
p + facet_grid(. ~ statType, scales = "free")
q <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_density(fill="white")
q + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=log(..density..)),fill="white")
p + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=log(..density..+.05)),fill="white")
p + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=log(..density..+`)),fill="white")
p + facet_grid(. ~ statType, scales = "free")
p
a;sldifji8o9p89
2938
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=..density..),fill="white")
p + facet_grid(. ~ statType, scales = "free")
?geom_histogram
p <- ggplot(plotData, aes(x = , color = factor(method))) + geom_histogram(aes(y=..density..),fill="white", binwidth=1)
p + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = , color = factor(method))) + geom_histogram(aes(y=..density.., binwidth=1),fill="white")
p + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=..density.., binwidth=1),fill="white")
p + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=..density..),fill="white", binwidth=1)
p + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value+1, color = factor(method))) + geom_histogram(aes(y=..density..),fill="white", binwidth=1)
p + facet_grid(. ~ statType, scales = "free")
q <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_density(fill="white")
q + facet_grid(. ~ statType, scales = "free")
q <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_density()
q + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value, color = factor(method))) + geom_histogram(aes(y=..density..),fill="white", binwidth=1)
p + facet_grid(. ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value)) + geom_histogram(aes(y=..density..),fill="white", binwidth=1)
p + facet_grid(method ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value, color = "black")) + geom_histogram(aes(y=..density..),fill="white", binwidth=1)
p + facet_grid(method ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=1)
p + facet_grid(method ~ statType, scales = "free")
p <- ggplot(plotData, aes(x = value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=1)
p + facet_grid(method ~ statType, scales = "free")+theme_set(theme_gray(base_size = 18))
p <- ggplot(plotData, aes(x = value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=1)
p + facet_grid(method ~ statType, scales = "free")+theme_set(theme_gray(base_size = 22))
p <- ggplot(plotData, aes(x = value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=1)
p + facet_grid(method ~ statType, scales = "free")+theme_set(theme_gray(base_size = 24))
p <- ggplot(plotData, aes(x = value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=1)
p + facet_grid(method ~ statType, scales = "free")+theme_set(theme_gray(base_size = 20))
source("generatePlot.R")
generatePlot(resultsMatrix)
source('~/.active-rstudio-document', echo=TRUE)
plotData <- melt(resultsMatrix)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- cast(plotData[,c("value","method", "statType")], value ~ method + statType)
?cast
plotData <- dcast(plotData[,c("value","method", "statType")], value ~ method + statType)
plotData <- melt(resultsMatrix)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
head(plotDAta)
head(plotData)
?dcast
plotData <- melt(resultsMatrix)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType")], value ~ method + statType + rownames(plotData))
head(plotData)
plotData <- melt(resultsMatrix)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat))) %>% mutate(id = rownames(plotData))
head(plotData)
plotData <- dcast(plotData[,c("value","method", "statType")], value ~ method + statType + id)
head(plotData)
plotData <- melt(resultsMatrix)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat))) %>% mutate(id = rownames(plotData))
plotData <- dcast(plotData[,c("value","method", "statType")], value + statType ~ method + id)
head(plotData)
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
head(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat))) %>% mutate(id = rownames(plotData))
plotData <- dcast(plotData[,c("value","method", "statType")], value ~ id + method +staType )
plotData <- dcast(plotData[,c("value","method", "statType")], value ~ id + method +statType )
head(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType")], value ~ trial + method +statType )
head(plotData)
plotData <- dcast(plotData[,c("value","method", "statType","trial")], value ~ trial + method +statType )
head(plotData)
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], value ~ method +statType )
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial + method + statType ~ value )
head(plotData)
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial ~ method ~ statType ~ value)
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial ~ method + statType)
head(plotData)
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial + method ~ statType)
head(plotData)
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2)))
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2))
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2)) %>% mutate(Specificity = round(TrueNegative/(TrueNegative + FalsePositive),digits=2))
head(plotData)
plotData <- melt(plotData[,c("trial","method","Sensitivity","Specificity")])
head(plotData)
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=1)
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1)
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.05)
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1)
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
generateSensPlot <- function(resultsMatrix){
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial + method ~ statType)
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2)) %>% mutate(Specificity = round(TrueNegative/(TrueNegative + FalsePositive),digits=2))
plotData <- melt(plotData[,c("trial","method","Sensitivity","Specificity")])
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1)
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
}
generateSensPlot(resultsMatrix)
generateSensPlot <- function(resultsMatrix){
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial + method ~ statType)
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2)) %>% mutate(Specificity = round(TrueNegative/(TrueNegative + FalsePositive),digits=2))
plotData <- melt(plotData[,c("trial","method","Sensitivity","Specificity")])
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1) + geom_boxplot()
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
}
generateSensPlot(resultsMatrix)
generateSensPlot <- function(resultsMatrix){
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial + method ~ statType)
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2)) %>% mutate(Specificity = round(TrueNegative/(TrueNegative + FalsePositive),digits=2))
plotData <- melt(plotData[,c("trial","method","Sensitivity","Specificity")])
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1) +  geom_vline(aes(xintercept=mean(value)),linetype="dashed", size=1, colour="red")
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
}
generateSensPlot(resultsMatrix)
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial + method ~ statType)
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2)) %>% mutate(Specificity = round(TrueNegative/(TrueNegative + FalsePositive),digits=2))
plotData <- melt(plotData[,c("trial","method","Sensitivity","Specificity")])
plotData2 <- summarize(plotData,value.mean = mean(value))
head(plotData2)
plotData2 <- plotData %>% group_by(method, statType) %>% summarize(value.mean = mean(value))
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial + method ~ statType)
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2)) %>% mutate(Specificity = round(TrueNegative/(TrueNegative + FalsePositive),digits=2))
plotData <- melt(plotData[,c("trial","method","Sensitivity","Specificity")])
head(plotData)
plotData2 <- plotData %>% group_by(method, variable) %>% summarize(value.mean = mean(value))
head(plotData2)
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1) +  geom_vline(data=plotData2, aes(xintercept=value.mean,linetype="dashed", size=1, colour="red")
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1) +  geom_vline(data=plotData2, aes(xintercept=value.mean,linetype="dashed", size=1, colour="red"))
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1) +  geom_vline(data=plotData2, aes(xintercept=value.mean,linetype="dashed", size=.5, colour="red"))
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1) +  geom_vline(data=plotData2, aes(xintercept=value.mean,linetype="dashed", colour="red"))
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
generatePlot <- function(resultsMatrix){
require(ggplot2)
require(reshape2)
require(dplyr)
plotData <- melt(resultsMatrix)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData2 <- plotData %>% group_by(method, statType) %>% summarize(value.mean = mean(value))
p <- ggplot(plotData, aes(x = value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=1) + geom_vline(data=plotData2, aes(xintercept=value.mean,linetype="dashed", colour="red"))
p + facet_grid(method ~ statType, scales = "free")+theme_set(theme_gray(base_size = 20))
}
generateSensPlot <- function(resultsMatrix){
plotData <- mutate(resultsMatrix, trial = rownames(resultsMatrix))
plotData <- melt(plotData)
plotData <- plotData %>% mutate(method = sapply(plotData$variable, FUN = getMethod)) %>% mutate(statType = factor(sapply(plotData$variable, FUN = getStat)))
plotData <- dcast(plotData[,c("value","method", "statType","trial")], trial + method ~ statType)
plotData <- plotData %>% mutate(Sensitivity = round(TruePositive/(TruePositive+FalseNegative),digits=2)) %>% mutate(Specificity = round(TrueNegative/(TrueNegative + FalsePositive),digits=2))
plotData <- melt(plotData[,c("trial","method","Sensitivity","Specificity")])
plotData2 <- plotData %>% group_by(method, variable) %>% summarize(value.mean = mean(value))
p <- ggplot(plotData, aes(x=value)) + geom_histogram(aes(y=..density..), color = "steelblue", fill="white", binwidth=.1) +  geom_vline(data=plotData2, aes(xintercept=value.mean,linetype="dashed", colour="red"))
p + facet_grid(method ~ variable, scales = "free")+theme_set(theme_gray(base_size = 20))
}
getMethod <- function(variableName){
index = grep(substr(variableName,1,3),c("stepwise","anova","bma","bms"))
return(c("stepwise","anova","bma","bms")[index])
}
getStat <- function(variableName){
name = substr(variableName,3,nchar(as.character(variableName)))
select = c(grepl("TruePositive", name), grepl("FalsePositive", name), grepl("FalseNegative", name), grepl("TrueNegative", name))
return(c("TruePositive","FalsePositive","FalseNegative","TrueNegative")[select])
}
generatePlot(resultsMatrix)
