summary(data)
data.melted <- melt(data, id.vars = c("NJ.PA","BurgerKing","KFC","Roys","Wendys"))
data.melted[1:10,]
head(data.melted)
data.melted[,c(2:5)]
?apply
names(data)
c("Burger King", "KFC", "Roys", "Wendys")[c(0,0,0,1)]
c("Burger King", "KFC", "Roys", "Wendys")[c(0,0,1,0)]
c("Burger King", "KFC", "Roys", "Wendys")[,c(0,0,1,0)]
c("Burger King", "KFC", "Roys", "Wendys")[c(0,0,1,0)%*%c(1,2,3,4)]
restaurant <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[c(0,0,1,0)%*%c(1,2,3,4)]
apply(data.melted[,c(2:5)], MARGIN =1, restaurant)
restaurant <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
apply(data.melted[,c(2:5)], MARGIN =1, restaurant)
restaurantPicker <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
restaurant <- apply(data.melted[,c(2:5)], MARGIN =1, restaurantPicker)
names(data.melted)
data.melted <- cbind(state = data.melted$NJ.PA, restaurant, data.melted$variable, data.melted$value)
###########################
# TESTING GGVIS OUT USING #
# MINIMUM WAGE DATA       #
###########################
#SOURCE UTILITY FUNCTIONS
source("~/GitHub/ggvisTest/utility.R")
#READ-IN DATA
data <- read.csv("~/GitHub/ggvisTest/Minimum Wage - Sheet1.csv")
#IMPORT GGVIS
require(ggvis)
require(reshape2)
require(dplyr)
#DESCRIPTION OF RAW DATA
# NJ.PA, indicator for whether or not restaurant is in NJ
# EmploymentPost, EmploymentPre, how many people employed at restaurant at beginning and end of study period
# WagePre, wage before
# Burger King, KFC, Roys, Wendys, type of restaurant
#TIDY THE DATA
data.melted <- melt(data, id.vars = c("NJ.PA","BurgerKing","KFC","Roys","Wendys"))
head(data.melted)
restaurantPicker <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
restaurant <- apply(data.melted[,c("Burger King", "KFC", "Roys", "Wendys")], MARGIN =1, restaurantPicker)
data.melted <- cbind(state = data.melted$NJ.PA, restaurant, data.melted$variable, data.melted$value)
head(data.melted)
restaurant <- apply(data.melted[,c("BurgerKing", "KFC", "Roys", "Wendys")], MARGIN =1, restaurantPicker)
data.melted <- cbind(state = data.melted$NJ.PA, restaurant, data.melted$variable, data.melted$value)
head(data.melted)
###########################
# TESTING GGVIS OUT USING #
# MINIMUM WAGE DATA       #
###########################
#SOURCE UTILITY FUNCTIONS
source("~/GitHub/ggvisTest/utility.R")
#READ-IN DATA
data <- read.csv("~/GitHub/ggvisTest/Minimum Wage - Sheet1.csv")
#IMPORT GGVIS
require(ggvis)
require(reshape2)
require(dplyr)
#DESCRIPTION OF RAW DATA
# NJ.PA, indicator for whether or not restaurant is in NJ
# EmploymentPost, EmploymentPre, how many people employed at restaurant at beginning and end of study period
# WagePre, wage before
# Burger King, KFC, Roys, Wendys, type of restaurant
#TIDY THE DATA
data.melted <- melt(data, id.vars = c("NJ.PA","BurgerKing","KFC","Roys","Wendys"))
head(data.melted)
#merge restaurant indicators into restaurant variable
restaurantPicker <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
restaurant <- apply(data.melted[,c("BurgerKing", "KFC", "Roys", "Wendys")], MARGIN =1, restaurantPicker)
data.melted <- cbind(state = ifelse(data.melted$NJ.PA==1, "New Jersey", "Pennsylvania"), restaurant, data.melted$variable, data.melted$value)
head(data.melted)
###########################
# TESTING GGVIS OUT USING #
# MINIMUM WAGE DATA       #
###########################
#SOURCE UTILITY FUNCTIONS
source("~/GitHub/ggvisTest/utility.R")
#READ-IN DATA
data <- read.csv("~/GitHub/ggvisTest/Minimum Wage - Sheet1.csv")
#IMPORT GGVIS
require(ggvis)
require(reshape2)
require(dplyr)
#DESCRIPTION OF RAW DATA
# NJ.PA, indicator for whether or not restaurant is in NJ
# EmploymentPost, EmploymentPre, how many people employed at restaurant at beginning and end of study period
# WagePre, wage before
# Burger King, KFC, Roys, Wendys, type of restaurant
#TIDY THE DATA
data.melted <- melt(data, id.vars = c("NJ.PA","BurgerKing","KFC","Roys","Wendys"))
head(data.melted)
data.melted2 <- cbind(state = ifelse(data.melted$NJ.PA==1, "New Jersey", "Pennsylvania"), restaurant, data.melted$variable, data.melted$value)
head(data.melted2)
data.melted2 <- cbind(state = ifelse(data.melted$NJ.PA==1, "New Jersey", "Pennsylvania"), restaurant, data.melted[,c("variable", "value")])
head(data.melted2)
###########################
# TESTING GGVIS OUT USING #
# MINIMUM WAGE DATA       #
###########################
#SOURCE UTILITY FUNCTIONS
source("~/GitHub/ggvisTest/utility.R")
#READ-IN DATA
data <- read.csv("~/GitHub/ggvisTest/Minimum Wage - Sheet1.csv")
#IMPORT GGVIS
require(ggvis)
require(reshape2)
require(dplyr)
#DESCRIPTION OF RAW DATA
# NJ.PA, indicator for whether or not restaurant is in NJ
# EmploymentPost, EmploymentPre, how many people employed at restaurant at beginning and end of study period
# WagePre, wage before
# Burger King, KFC, Roys, Wendys, type of restaurant
#TIDY THE DATA
data.melted.temp <- melt(data, id.vars = c("NJ.PA","BurgerKing","KFC","Roys","Wendys"))
head(data.melted)
#merge restaurant indicators into restaurant variable
restaurantPicker <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
restaurant <- apply(data.melted.temp[,c("BurgerKing", "KFC", "Roys", "Wendys")], MARGIN =1, restaurantPicker)
data.melted <- cbind(state = ifelse(data.melted.temp$NJ.PA==1, "New Jersey", "Pennsylvania"), restaurant, data.melted.temp[,c("variable", "value")])
head(data.melted)
##################
# "DESIGN PHASE" #
##################
#This section is known as the "design phase"
#because we attempt to balance the covariates
#between the treatment and control groups,
#much like we would in an actual experiment.
###########################
# TESTING GGVIS OUT USING #
# MINIMUM WAGE DATA       #
###########################
#SOURCE UTILITY FUNCTIONS
source("~/GitHub/ggvisTest/utility.R")
#READ-IN DATA
data <- read.csv("~/GitHub/ggvisTest/Minimum Wage - Sheet1.csv")
#IMPORT GGVIS
require(ggvis)
require(reshape2)
require(dplyr)
#DESCRIPTION OF RAW DATA
# NJ.PA, indicator for whether or not restaurant is in NJ
# EmploymentPost, EmploymentPre, how many people employed at restaurant at beginning and end of study period
# WagePre, wage before
# Burger King, KFC, Roys, Wendys, type of restaurant
#TIDY THE DATA
data.melted.temp <- melt(data, id.vars = c("NJ.PA","BurgerKing","KFC","Roys","Wendys"))
head(data.melted.temp)
#merge restaurant indicators into restaurant variable
restaurantPicker <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
restaurant <- apply(data.melted.temp[,c("BurgerKing", "KFC", "Roys", "Wendys")], MARGIN =1, restaurantPicker)
data.melted <- cbind(state = ifelse(data.melted.temp$NJ.PA==1, "New Jersey", "Pennsylvania"), restaurant, data.melted.temp[,c("variable", "value")])
head(data.melted)
##################
# "DESIGN PHASE" #
##################
#This section is known as the "design phase"
#because we attempt to balance the covariates
#between the treatment and control groups,
#much like we would in an actual experiment.
source("http://stat.duke.edu/courses/Spring14/sta320.01/CausalInference.R")
subclass.var
install.packages("plyr")
install.packages("plyr")
?rmvnorm
?rmvnorm
require(mvtnorm)
?rmvnorm
?apply
?anova
?aov
Duke.2010.FINAL <- read.csv("~/GitHub/affectControlTheory/Raw Data/Duke 2010 FINAL.csv")
View(Duke.2010.FINAL)
duke10 <- read.csv("~/GitHub/affectControlTheory/Raw Data/Duke 2010 FINAL.csv")
head(duke10)
require(reshape2)
is.na(duke10)
table(is.na(duke10))
###################################
# EXPLORATORY ANALYSIS OF DUKE 10 #
###################################
require(reshape2)
#The cleaned duke 10 data
duke10 <- read.csv("~/GitHub/affectControlTheory/Raw Data/Duke 2010 ENGLISH - FINAL.csv")
head(duke10)
#we wish to "tidy" the data, where:
head(duke10)
shiny::runApp('GitHub/affectControlTheory/Raw Data/duke10applet2')
shiny::runApp('GitHub/affectControlTheory/Raw Data/duke10applet')
?floor
conditon = TRUE;
n=100
while(condition){
n=floor(n-sqrt(n))
print(n)
if(n==0){
condition = FALSE;
}
}
condition = TRUE;
n=100
while(condition){
n=floor(n-sqrt(n))
print(n)
if(n==0){
condition = FALSE;
}
}
require(LearnBayes)
require(bms)
require(BMS)
shiny::runApp('C:/Users/Mao/Dropbox/Senior Year/SVdPV/SVdPV_Applet')
?linreg
?lm
data = cbind("x"=c(1,2,3,4,5)+1,"y"=c(1,2,3,4,5))
lm(x~y,data)
data = data.frame(cbind("x"=c(1,2,3,4,5)+1,"y"=c(1,2,3,4,5)))
lm(x~y,data)
speedDate <- read.csv("C:/Users/Mao/Dropbox/Senior Year/Coursera/Speed Dating/speedDate.csv")
View(speedDate)
speedDate <- read.csv("C:/Users/Mao/Dropbox/Senior Year/Coursera/Speed Dating/speedDate.csv")
require(MASS)
data(iris)
data(cars)
require(stats)
cars
head(\)cars
head(cars)
sample_n(cars,10)
sample(cars)
sample(cars,10)
?samples
?sample
sample(cars,size=10)
data <- cars
sample(data, size=10)
1/0.6
support <- seq(-4,4,.01)
?qnorm
logit < exp(support)/(1+exp(support))
probit <- pnorm(support)
logit <- exp(support)/(1+exp(support))
probit <- pnorm(support)
plot(support, logit, col = 1)
plot(support, logit, col = 1, type = "l")
lines(support, probit, col = 2)
plot(support, logit, col = 1, type = "l", main = "Comparison of Logistic and Inverse Normal CDF Link Functions")
lines(support, probit, col = 2)
plot(support, logit, col = 1, type = "l", main = "Comparison of Logistic and Inverse Normal CDF Link Functions", ylab= "Probability")
lines(support, probit, col = 2)
support <- seq(0,1,.0001)
logit <-log(support/(1-support))
probit <- qnorm(support)
plot(logit,logit, type = "l", col = 1)
lines(logit,probit, col = 2)
abline(0,0)
data <- as.data.frame(cbind(logit,probit))
names(data) <- c("logit", "probit")
require(reshape2)
dataLong <- melt(data)
head(dataLong)
support <- seq(0.0001,1,.0001)
logit <-log(support/(1-support))
probit <- qnorm(support)
data <- as.data.frame(cbind(logit,probit))
names(data) <- c("logit", "probit")
require(reshape2)
dataLong <- melt(data)
head(dataLong)
tail(dataLong)
support <- seq(0.0001,0.9999,.0001)
logit <-log(support/(1-support))
probit <- qnorm(support)
data <- as.data.frame(cbind(logit,probit))
names(data) <- c("logit", "probit")
require(reshape2)
dataLong <- melt(data)
head(dataLong)
tail(dataLong)
support <- seq(0.001,0.999,.001)
logit <-log(support/(1-support))
probit <- qnorm(support)
data <- as.data.frame(cbind(logit,probit))
names(data) <- c("logit", "probit")
require(reshape2)
dataLong <- melt(data)
head(dataLong)
tail(dataLong)
require(ggplot2)
p <- ggplot(dataLong, aes(x=value,y=value, factor = variable)) + geom_lines()
p <- ggplot(dataLong, aes(x=value,y=value, factor = variable)) + geom_line()
p
p <- ggplot(data, aes(x=logit, sample=probit)) + geom_qq()
p <- ggplot(data, aes(x=logit, sample=probit)) + stat_qq()
p
p <- ggplot(data, aes(x=logit, sample=probit)) + geom_point(stat = "qq")
p
data <- as.data.frame(cbind(logit,probit, support))
names(data) <- c("logit", "probit", "probs")
require(reshape2)
dataLong <- melt(data)
head(dataLong)
dataLong <- melt(data)
head(dataLong)
tail(dataLong)
?melt
dataLong <- melt(data, measure.vars = c("logit","probit"))
head(dataLong)
tail(dataLong)
require(ggplot2)
p <- ggplot(dataLong, aes(x=probs,y=value, factor = variable)) + geom_line()
p
data <- as.data.frame(cbind(logit,probit, support, logit))
names(data) <- c("logit", "probit", "probs", "logitscale")
require(reshape2)
dataLong <- melt(data, measure.vars = c("logit","probit"))
head(dataLong)
tail(dataLong)
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line()
p
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line()
p + xlab("Logit scale") + ylab("Logit scale")
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = factor(variable)) + geom_line()
p + xlab("Logit scale") + ylab("Logit scale") + title("Comparison of ")
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line()
p + xlab("Logit scale") + ylab("Logit scale") + title("Comparison of probit link function with logistic")
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line()
p + xlab("Logit scale") + ylab("Logit scale") + gg_title("Comparison of probit link function with logistic")
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic")
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 20))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))  + geom_text(x = logitscale, y = -6, text = probs)
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(x = logitscale, y = -6, text = probs)
?geom_text
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text( aes(y = -6, label = probs))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
?sample_n
require(dplyr)
?sample_n
dim(dataLong)
1998/10
1990
1900
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(dataLong[seq(100, 1900,100),],aes(y = -6, label = probs))
sampleData <- dataLong[seq(100, 1900,100),]
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(sampleData,aes(y = -6, label = probs))
sampleData <- dataLong[seq(100, 1900,100),]
head(sampleData)
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(data=sampleData,aes(y = -6, label = probs))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
which(support==0.9)
which(support==0.1)
which(support==0.001)
sampleData <- dataLong[c(1,100),]
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(data=sampleData,aes(y = -6, label = probs))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
which(support==0.01)
which(support==0.01)
support <- seq(0.001,0.999,.001)
which(support==0.01)
which(support==0.1)
which(support==0.01)
which(support==0.02)
support[1:100]
which(support==0.010)
support[10]
which(support==0.01)
sampleData <- dataLong[c(1,10,100),]
head(dataLong)
tail(dataLong)
require(ggplot2)
require(dplyr)
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(data=sampleData,aes(y = -6, label = probs))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
dataLong <- melt(data, measure.vars = c("logit","probit"))
sampleData <- dataLong[c(1,10,100),]
head(dataLong)
tail(dataLong)
require(ggplot2)
require(dplyr)
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(data=sampleData,aes(y = -8, label = probs))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
which(support == 0.999)
which(support == 0.9)
which(support == 0.99)
which(support == 0.5)
dataLong <- melt(data, measure.vars = c("logit","probit"))
sampleData <- dataLong[c(1,10,100,500,900,990,999),]
head(dataLong)
tail(dataLong)
require(ggplot2)
require(dplyr)
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(data=sampleData,aes(y = -8, label = probs))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(data=sampleData,aes(y = -7, label = probs))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() + geom_text(data=sampleData,aes(y = -7, label = probs)) + geom_vline(xintercept = dataLong$logitscale[c(1,10,100,500,900,990,999)])
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(1,10,100,500,900,990,999)], linetype = "longdash", alpha = 0.5)+ geom_text(data=sampleData,aes(y = -7, label = probs))
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(1,10,100,500,900,990,999)], linetype = "longdash", alpha = 0.5)+ geom_text(data=sampleData,aes(y = -7, label = probs)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(1,10,100,500,900,990,999)], linetype = "longdash", alpha = 0.25)+ geom_text(data=sampleData,aes(y = -7, label = probs)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.25)+ geom_text(data=sampleData,aes(y = -7, label = probs)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.25, color = "red")+ geom_text(data=sampleData,aes(y = -7, label = probs)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.5, color = "red")+ geom_text(data=sampleData,aes(y = -7, label = probs)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable, color = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.5, color = "red")+ geom_text(data=sampleData,aes(y = -7, label = probs)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable, color = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.5, color = "red")+ geom_text(data=sampleData,aes(y = -7, label = probs, color = "black")) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable, color = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.5, color = "red")+ geom_text(data=sampleData,aes(x = logitscale, y = -7, label = probs, color = 1)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable, color = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.5, color = "red")+ geom_text(data=sampleData,aes(x = logitscale, y = -7, label = probs, color = "black")) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = variable, color = variable)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.5, color = "red")+ geom_text(data=sampleData,aes(x = logitscale, y = -7, label = probs)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
?melt
dataLong <- melt(data, measure.vars = c("logit","probit"), variable.name = "Link")
sampleData <- dataLong[c(1,10,100,500,900,990,999),]
head(dataLong)
tail(dataLong)
require(ggplot2)
require(dplyr)
p <- ggplot(dataLong, aes(x=logitscale,y=value, factor = Link, color = Link)) + geom_line() +  geom_vline(xintercept = dataLong$logitscale[c(900)], linetype = "longdash", alpha = 0.5, color = "red")+ geom_text(data=sampleData,aes(x = logitscale, y = -7, label = probs)) +theme_bw()
p + xlab("Logit scale") + ylab("Logit scale") + ggtitle("Comparison of probit link function with logistic function") + theme(text = element_text(size = 18))
getTransform <- function(eta){
probScale <- pnorm(eta[1])
return(log(probScale/(1-probScale))/eta[1])
}
getTransform(2)
getTransform(-2)
getTransform(2)*2
getTransform(0)*2
getTransform(0)*0
getTransform(2)*2*2
?dbinom
dbinom(1,4,0.5)
dbinom(2,4,0.5)
dbinom(3,4,0.5)
dbinom(4,4,0.5)
0.5^4
SpeedDating <- read.csv("C:/Users/Mao/Dropbox/Senior Year/Coursera/Speed Dating/SpeedDating.csv")
names(SpeedDating)
mean(SpeedDating$SharedInterestsF)
mean(SpeedDating$SharedInterestsF, na.rm=TRUE)
sd(SpeedDating$SharedInterestsF, na.rm=TRUE)
pnorm(0.63)
1-0.7356527
1-pnorm(6.3)
1-pnorm(1.58)
x <- c(111261,768771,610856,102400,377109)
y <- c(0.745,4.030,3.368,0.700,2.315)
plot(x,y)
plot(x,y, main = "Compression Time vs. Bits in", xlab="Bits in", ylab ="Time (s)")
plot(x,z, main = "Bits out vs. Bits in", xlab="Bits in", ylab ="Bits out", type = "l")
z <- c(73791,439405,369331,73588,247424)
plot(x,z, main = "Bits out vs. Bits in", xlab="Bits in", ylab ="Bits out", type = "l")
plot(x,z, main = "Bits out vs. Bits in", xlab="Bits in", ylab ="Bits out")
plot(x,y, main = "Compression Time vs. Bits in", xlab="Bits in", ylab ="Time (s)")
plot(x,z, main = "Bits out vs. Bits in", xlab="Bits in", ylab ="Bits out")
x <- c(2149096,  3706306, 786568, 1179784, 786568, 1179784, 1498414, 1179784)
y <- c(18.321,  20.690, 7.396 , 10.732, 7.554, 9.711 , 10.619, 10.083)
z <- c(2034591, 2188589,  766142,  1109969 , 756964,  1085497, 1127641,  1135857)
plot(x,z, main = "Bits out vs. Bits in", xlab="Bits in", ylab ="Bits out")
plot(x,y, main = "Compression Time vs. Bits in", xlab="Bits in", ylab ="Time (s)")
library("knitr")
system("pandoc -v")
pandoc('TXF_report_objectives.html', format='latex' )
setwd("~/GitHub/affectControlTheory/simulation/Report 1-30")
source("runSimulation.R")
source("modelCoefs.R")
source("lynnPriors.R")
SIMULATIONS = 200;
models <- c("eae","ebe","eoe", "eap", "ebp", "eop", "eaa", "eba", "eoa")
ptm = proc.time()
for (i in 1:length(models)){
model <- eval(parse(text=paste("simulation.model.",models[i],".3way",sep="")))
storage <- list()
for (j in 1:SIMULATIONS){
simulation <- runSimulation(model, trainSize=200, testSize=1, prior = lynnPriors[,paste(models[i])])
storage[[length(storage)+1]] <- simulation
}
storageFile <- paste("~/GitHub/affectControlTheory/simulation/Report 1-30/storage/",models[i],"simulation.txt",sep="")
save(storage, file=storageFile)
}
setwd("~/GitHub/affectControlTheory/simulation/Report 1-30")
source("runSimulation.R")
source("modelCoefs.R")
source("lynnPriors.R")
SIMULATIONS = 100;
models <- c("eae","ebe","eoe", "eap", "ebp", "eop", "eaa", "eba", "eoa")
ptm = proc.time()
for (i in 1:length(models)){
model <- eval(parse(text=paste("simulation.model.",models[i],".3way",sep="")))
storage <- list()
for (j in 1:SIMULATIONS){
simulation <- runSimulation(model, trainSize=200, testSize=1, prior = lynnPriors[,paste(models[i])])
storage[[length(storage)+1]] <- simulation
}
storageFile <- paste("~/GitHub/affectControlTheory/simulation/Report 1-30/storage/",models[i],"simulation.txt",sep="")
save(storage, file=storageFile)
}
proc.time()-ptm
# 1 simulation, 9 models takes about 10 minutes
# 45 simulation, 9 models takes about 4.7 hours
36650/60
