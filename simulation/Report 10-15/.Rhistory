"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
simulation.model.eoe.3way = c("intercept" = 0.73,
"ae" = 0.022,
"ap" = 0,
"aa" = 0,
"be" = 0.123,
"bp" = -0.033,
"ba" = 0,
"oe" = 0.622,
"op" = 0,
"oa" = 0,
"ae.be" = 0.038,
"ae.bp" = 0,
"ae.ba" = 0,
"ae.oe" = 0,
"ae.op" = 0,
"ae.oa" = 0,
"ap.be" = -0.019,
"ap.bp" = 0,
"ap.ba" = 0,
"ap.oe" = 0,
"ap.op" = 0,
"ap.oa" = 0,
"aa.be" = 0,
"aa.bp" = 0,
"aa.ba" = 0.025,
"aa.oe" = 0,
"aa.op" = 0,
"aa.oa" = 0,
"be.oe" = 0.044,
"be.op" = 0.014,
"be.oa" = 0,
"bp.oe" = -0.037,
"bp.op" = 0,
"bp.oa" = -0.034,
"ba.oe" = 0.014,
"ba.op" = 0.033,
"ba.oa" = 0,
"ae.be.oe" = 0.12,
"ae.be.op" = 0,
"ae.be.oa" = 0,
"ae.bp.oe" = 0,
"ae.bp.op" = 0,
"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = 0,
"ap.bp.op" = 0,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
simulation.model.eae.3way = c("intercept" = -0.098,
"ae" = 0.47,
"ap" = 0,
"aa" = 0,
"be" = 0.425,
"bp" = -0.069,
"ba" = -0.106,
"oe" = 0.055,
"op" = 0,
"oa" = 0,
"ae.be" = 0.048,
"ae.bp" = -0.38,
"ae.ba" = 0,
"ae.oe" = 0,
"ae.op" = 0,
"ae.oa" = 0,
"ap.be" = 0,
"ap.bp" = 0,
"ap.ba" = 0,
"ap.oe" = 0,
"ap.op" = 0,
"ap.oa" = 0,
"aa.be" = 0,
"aa.bp" = 0,
"aa.ba" = 0 ,
"aa.oe" = 0,
"aa.op" = 0,
"aa.oa" = 0,
"be.oe" = 0.130,
"be.op" = -0.058,
"be.oa" = 0,
"bp.oe" = -0.070,
"bp.op" = 0.068,
"bp.oa" = 0,
"ba.oe" = 0,
"ba.op" = 0,
"ba.oa" = 0,
"ae.be.oe" = 0.026,
"ae.be.op" = 0,
"ae.be.oa" = 0,
"ae.bp.oe" = 0,
"ae.bp.op" = 0.033,
"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = 0,
"ap.bp.op" = 0,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0.031)
simulation.model.ebe.3way = c("intercept" = -0.051,
"ae" = 0.071,
"ap" = 0,
"aa" = 0,
"be" = 0.571,
"bp" = -0.095,
"ba" = -0.116,
"oe" = 0.035,
"op" = 0,
"oa" = 0,
"ae.be" = 0.015,
"ae.bp" = 0.025,
"ae.ba" = 0,
"ae.oe" = 0,
"ae.op" = 0,
"ae.oa" = 0,
"ap.be" = 0.021,
"ap.bp" = 0,
"ap.ba" = 0,
"ap.oe" = 0,
"ap.op" = 0,
"ap.oa" = 0,
"aa.be" = 0,
"aa.bp" = 0,
"aa.ba" = 0 ,
"aa.oe" = 0,
"aa.op" = 0,
"aa.oa" = 0,
"be.oe" = 0.116,
"be.op" = -0.052,
"be.oa" = 0,
"bp.oe" = -0.034,
"bp.op" = 0.071,
"bp.oa" = 0,
"ba.oe" = 0,
"ba.op" = 0.036,
"ba.oa" = 0,
"ae.be.oe" = 0.021,
"ae.be.op" = 0,
"ae.be.oa" = 0,
"ae.bp.oe" = 0,
"ae.bp.op" = 0.018,
"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = 0,
"ap.bp.op" = -0.031,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
simulation.model.eoe.3way = c("intercept" = 0.73,
"ae" = 0.022,
"ap" = 0,
"aa" = 0,
"be" = 0.123,
"bp" = -0.033,
"ba" = 0,
"oe" = 0.622,
"op" = 0,
"oa" = 0,
"ae.be" = 0.038,
"ae.bp" = 0,
"ae.ba" = 0,
"ae.oe" = 0,
"ae.op" = 0,
"ae.oa" = 0,
"ap.be" = -0.019,
"ap.bp" = 0,
"ap.ba" = 0,
"ap.oe" = 0,
"ap.op" = 0,
"ap.oa" = 0,
"aa.be" = 0,
"aa.bp" = 0,
"aa.ba" = 0.025,
"aa.oe" = 0,
"aa.op" = 0,
"aa.oa" = 0,
"be.oe" = 0.044,
"be.op" = 0.014,
"be.oa" = 0,
"bp.oe" = -0.037,
"bp.op" = 0,
"bp.oa" = -0.034,
"ba.oe" = 0.014,
"ba.op" = 0.033,
"ba.oa" = 0,
"ae.be.oe" = 0.12,
"ae.be.op" = 0,
"ae.be.oa" = 0,
"ae.bp.oe" = 0,
"ae.bp.op" = 0,
"ae.bp.oa" = 0,
"ae.ba.oe" = 0,
"ae.ba.op" = 0,
"ae.ba.oa" = 0,
"ap.be.oe" = 0,
"ap.be.op" = 0,
"ap.be.oa" = 0,
"ap.bp.oe" = 0,
"ap.bp.op" = 0,
"ap.bp.oa" = 0,
"ap.ba.oe" = 0,
"ap.ba.op" = 0,
"ap.ba.oa" = 0,
"aa.be.oe" = 0,
"aa.be.op" = 0,
"aa.be.oa" = 0,
"aa.bp.oe" = 0,
"aa.bp.op" = 0,
"aa.bp.oa" = 0,
"aa.ba.oe" = 0,
"aa.ba.op" = 0,
"aa.ba.oa" = 0)
sim.B = simulation.model.eae.3way
trainSize = 200
testSize = 200
#I want the data generated from the true model to have characteristics similar to the duke10 data
duke10 <- read.csv("~/GitHub/affectcontroltheory/Data Merged by Event/duke10_by_event.csv")
#covariate means
X.mean=matrix(colMeans(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")]))
#covariate SD
X.var=var(duke10[,c("ae","ap","aa","be","bp","ba","oe","op","oa")])
#simulated covariates
sim.X1= rmvnorm(trainSize+testSize,X.mean,X.var)
colnames(sim.X1) <- colnames(duke10[,10:18])
# TWO-WAY CROSS WORD INTERACTIONS
sim.X1.interaction = as.matrix(t(apply(sim.X1,1,combn,2,prod)))
colnames(sim.X1.interaction)=paste(combn(names(duke10[,10:18]),2,paste,collapse="."),sep="")
sim.X1.interaction.2=sim.X1.interaction[,c(-1,-2,-9,-22,-23,-27,-34,-35,-36)]
# THREE WAY CROSS WORD INTERACTIONS
#first, generate all three-way interaction names
sim.X1.3.names.full=paste(combn(names(duke10[,10:18]),3,paste,collapse="."),sep="")
#for-loop looks through all the interaction names and stores only those which are cross-word interactions
sim.X1.3.names = matrix(nrow = 84, ncol =2)
for (i in 1:length(sim.X1.3.names.full)){
interaction=sim.X1.3.names.full[i]
words = c(substr(interaction,1,1),substr(interaction,4,4),substr(interaction,7,7))
if(!is.na(sum(pmatch(c("a","b","o"),words)))){
sim.X1.3.names[i,] <- c(interaction,TRUE)
print(interaction)
}
else{
sim.X1.3.names[i,] <- c("",FALSE)
}
}
#then, calculate the interactions and use the names to select which ones to keep
sim.X1.interaction.3 <- as.matrix(t(apply(sim.X1,1,combn,3,prod)))[,sim.X1.3.names[,2]=="TRUE"]
colnames(sim.X1.interaction.3)=sim.X1.3.names[which(sim.X1.3.names[,2]=="TRUE"),1]
# COMBINE TWO-WAY AND THREE-WAY INTERACTIONS
sim.X1.design.matrix = (cbind(1,sim.X1,sim.X1.interaction.2,sim.X1.interaction.3))
#let the sd of the random error come from a lm on the real data
model.summary <- lm(eae ~. , data = duke10[,c("eae", "ae","ap","aa","be","bp","ba","oe","op","oa")]) %>% summary()
Y.sd <- model.summary$sigma
#GENERATE FAKE DATA FROM MODEL
#here we add intercept
sim.Y=matrix(rmvnorm(1,sim.X1.design.matrix%*%sim.B,diag(Y.sd^2,trainSize+testSize)),ncol=1)
#minus the intercept
sim.X1.design.dataframe <- data.frame(sim.X1.design.matrix)
sim.data <- data.frame(cbind(eae=sim.Y,sim.X1.design.matrix))
names(sim.data) <- c("response","intercept",names(sim.data)[c(-1,-2)])
####################
# CONDUCT ANALYSIS #
####################
#sample observations for training set
select.training.set <- sample(1:(testSize+trainSize),trainSize)
#train.data, a training set consisting of 150 observations
train.data <- sim.data[select.training.set,]
#test.data, a test set consisting of 850 observations
test.data <- sim.data[-select.training.set,]
#OLS REGRESSION
sim.model.ols = lm(response~.,data=train.data[,-2])
#STEPWISE REGRESSION
sim.model.stepwise = step(sim.model.ols, trace = FALSE)
#store identified variables
var.iden.stepwise <- names(sim.model.stepwise$coefficients)[-1]
#BAYESIAN MODEL AVERAGING
#unfortunately can't specify prior probability
sim.model.BMA <- bicreg(x = train.data[,c(-1,-2)], y = train.data[,"response"], maxCol=30)
#store identified variables
var.iden.BMA <- sim.model.BMA$namesx[sim.model.BMA$probne0>50]
#BAYESIAN MODEL AVERAGING
sim.model.BMS <- bms(train.data[,-2], iter=10000)
var.iden.BMS <- rownames(coef(sim.model.BMS))[which(coef(sim.model.BMS)[,1]>0.5)]
#HEISE ANOVA ANALYSIS
#select the main factors and get medians for the columns
train.data.main.factors <- select(train.data,response,ae,ap,aa,be,bp,ba,oe,op,oa)
mainFactorMedians <- select(train.data.main.factors,ae,ap,aa,be,bp,ba,oe,op,oa)%>%apply(MARGIN=2, FUN=median)
#then, dichotomize these main factors
#note, mutation written out manually for clarity
train.data.dichotomized <-
mutate(train.data.main.factors,
ae = ae > mainFactorMedians["ae"],
ap = ap > mainFactorMedians["ap"],
aa = aa > mainFactorMedians["aa"],
be = be > mainFactorMedians["be"],
bp = bp > mainFactorMedians["bp"],
ba = ba > mainFactorMedians["ba"],
oe = oe > mainFactorMedians["oe"],
op = op > mainFactorMedians["op"],
oa = oa > mainFactorMedians["oa"],)
#generate interaction terms from names in the train.data
#requires \\., regular expression for "."
formula <- gsub("\\.","*",names(train.data)[c(-1,-2)]) %>% paste(collapse = "+")
formula
#conduct anova
anova.model <- aov(response ~ ae+ap+aa+be+bp+ba+oe+op+oa+ae*be+ae*bp+ae*ba+ae*oe+ae*op+ae*oa+ap*be+ap*bp+ap*ba+ap*oe+ap*op+ap*oa+aa*be+aa*bp+aa*ba+aa*oe+aa*op+aa*oa+be*oe+be*op+be*oa+bp*oe+bp*op+bp*oa+ba*oe+ba*op+ba*oa+ae*be*oe+ae*be*op+ae*be*oa+ae*bp*oe+ae*bp*op+ae*bp*oa+ae*ba*oe+ae*ba*op+ae*ba*oa+ap*be*oe+ap*be*op+ap*be*oa+ap*bp*oe+ap*bp*op+ap*bp*oa+ap*ba*oe+ap*ba*op+ap*ba*oa+aa*be*oe+aa*be*op+aa*be*oa+aa*bp*oe+aa*bp*op+aa*bp*oa+aa*ba*oe+aa*ba*op+aa*ba*oa, data = train.data.dichotomized)
#get p-values from anova
#ignore the "residual" output
var.iden.anova <- (rownames(anova(anova.model))[-64])[ anova(anova.model)$'Pr(>F)'[-64] < 0.01 ]
var.iden.anova <- gsub(":",".",var.iden.anova)
#TRUE MODEL
#minus the intercept
var.model <- names(sim.B)[sim.B!=0][-1]
sim.model.stepwise
sim.model.stepwise$Coefficients
coef(sim.model.stepwise)
coef(sim.model.BMA)
?bma
?bic.reg
?bicreg
summary(sim.model.stepwise)
summary(sim.model.stepwise)$Estimate
sd(sim.model.stepwise)
se(sim.model.stepwise)
coefficients(sim.model.stepwise)
?lm
sim.model.stepwise$coefficients
summary(sim.model.stepwise)
summary(sim.model.stepwise)[, "Estimate"]
coef(summary(sim.model.stepwise))[, "Estimate"]
?bms
coef(sim.model.BMS)
coef(sim.model.BMS)[,"Post SD"]
var.iden.anova
head(train.data[,var.iden.anova])
sim.model.anova <- lm(response~.,data=train.data[,c("response",var.iden.anova)])
summary(sim.model.anova)
coef(summary(sim.model.anova))[, "Estimate"]
coef(sim.model.BMS)[,"Post Mean"]
sim.model.BMA$postmean
coef(summary(sim.model.stepwise))[, "Estimate"]
summary(sim.model.BMA)
length(sim.model.BMA$postmean)
length(coef(sim.model.BMS)[,"Post Mean"])
(coef(sim.model.BMS)[,"Post Mean"])
plot(sim.B[-1],(coef(sim.model.BMS)[,"Post Mean"]))
plot(sim.B[-1],(coef(sim.model.BMS)[,"Post Mean"]), xlim = c(-.2,.2), ylim = c(-.2,.2))
plot(sim.B[-1],(coef(sim.model.BMS)[,"Post Mean"]))
abline(0,1)
plot(sim.B[,names(sim.model.BMA$postmean)],sim.model.BMA$postmean)
plot(sim.B[names(sim.model.BMA$postmean)],sim.model.BMA$postmean)
plot(sim.B[names(coef(sim.model.BMS)[,"Post Mean"])], coef(sim.model.BMS)[,"Post Mean"])
plot(sim.B[names(coef(summary(sim.model.stepwise))[, "Estimate"])], coef(summary(sim.model.stepwise))[, "Estimate"])
plot(sim.B[names(coef(summary(sim.model.stepwise))[, "Estimate"])], coef(summary(sim.model.stepwise))[, "Estimate"])
source('~/.active-rstudio-document', echo=TRUE)
coefficientStorate = list();
coefficientStorage = list();
SIMULATIONS = 5;
resultsMatrix = as.data.frame(matrix(NA, SIMULATIONS, 16))
names(resultsMatrix) = c("stepwiseTruePositive", "stepwiseFalsePositive", "stepwiseFalseNegative", "stepwiseTrueNegative",
"anovaTruePositive", "anovaFalsePositive", "anovaFalseNegative", "anovaTrueNegative",
"bmaTruePositive", "bmaFalsePositive", "bmaFalseNegative", "bmaTrueNegative",
"bmsTruePositive", "bmsFalsePositive", "bmsFalseNegative", "bmsTrueNegative")
coefficientStorage = list();
for (i in 1:SIMULATIONS){
print(i);
simulation <- runSimulation(simulation.model.eae.3way, trainSize=200, testSize=200)
simulationIdentified <- simulation$var.iden
storeResults <- c(checker(simulationIdentified$stepwise, simulationIdentified$truth),checker(simulationIdentified$anova, simulationIdentified$truth),checker(simulationIdentified$bma, simulationIdentified$truth),checker(simulationIdentified$bms, simulationIdentified$truth))
resultsMatrix[i,] <- storeResults
coefficientStorage[i] = simulation$coef.est
}
?list
coefficientStorage = list(rep(NA,SIMULATIONS));
coefficientStorage
SIMULATIONS = 5;
resultsMatrix = as.data.frame(matrix(NA, SIMULATIONS, 16))
names(resultsMatrix) = c("stepwiseTruePositive", "stepwiseFalsePositive", "stepwiseFalseNegative", "stepwiseTrueNegative",
"anovaTruePositive", "anovaFalsePositive", "anovaFalseNegative", "anovaTrueNegative",
"bmaTruePositive", "bmaFalsePositive", "bmaFalseNegative", "bmaTrueNegative",
"bmsTruePositive", "bmsFalsePositive", "bmsFalseNegative", "bmsTrueNegative")
coefficientStorage = list();
for (i in 1:SIMULATIONS){
print(i);
simulation <- runSimulation(simulation.model.eae.3way, trainSize=200, testSize=200)
simulationIdentified <- simulation$var.iden
storeResults <- c(checker(simulationIdentified$stepwise, simulationIdentified$truth),checker(simulationIdentified$anova, simulationIdentified$truth),checker(simulationIdentified$bma, simulationIdentified$truth),checker(simulationIdentified$bms, simulationIdentified$truth))
resultsMatrix[i,] <- storeResults
coefficientStorage = c(coefficientStorage, simulation$coef.est)
}
coefficientStorage
length(coefficientStorage)
coefficientStorage[1]
coefficientStorage[2]
?assign
paste("trial",1)
SIMULATIONS = 5;
resultsMatrix = as.data.frame(matrix(NA, SIMULATIONS, 16))
names(resultsMatrix) = c("stepwiseTruePositive", "stepwiseFalsePositive", "stepwiseFalseNegative", "stepwiseTrueNegative",
"anovaTruePositive", "anovaFalsePositive", "anovaFalseNegative", "anovaTrueNegative",
"bmaTruePositive", "bmaFalsePositive", "bmaFalseNegative", "bmaTrueNegative",
"bmsTruePositive", "bmsFalsePositive", "bmsFalseNegative", "bmsTrueNegative")
coefficientStorage = list();
for (i in 1:SIMULATIONS){
print(i);
simulation <- runSimulation(simulation.model.eae.3way, trainSize=200, testSize=200)
simulationIdentified <- simulation$var.iden
storeResults <- c(checker(simulationIdentified$stepwise, simulationIdentified$truth),checker(simulationIdentified$anova, simulationIdentified$truth),checker(simulationIdentified$bma, simulationIdentified$truth),checker(simulationIdentified$bms, simulationIdentified$truth))
resultsMatrix[i,] <- storeResults
coefficientStorage = c(coefficientStorage, assign(paste("trial",1),simulation$coef.est))
}
coefficentStorage[1]
SIMULATIONS = 5;
resultsMatrix = as.data.frame(matrix(NA, SIMULATIONS, 16))
names(resultsMatrix) = c("stepwiseTruePositive", "stepwiseFalsePositive", "stepwiseFalseNegative", "stepwiseTrueNegative",
"anovaTruePositive", "anovaFalsePositive", "anovaFalseNegative", "anovaTrueNegative",
"bmaTruePositive", "bmaFalsePositive", "bmaFalseNegative", "bmaTrueNegative",
"bmsTruePositive", "bmsFalsePositive", "bmsFalseNegative", "bmsTrueNegative")
coefStoreStepwise = list();
coefStoreANOVA = list();
coefStoreBMA = list();
coefStoreBMS = list();
for (i in 1:SIMULATIONS){
#
print(i);
simulation <- runSimulation(simulation.model.eae.3way, trainSize=200, testSize=200)
simulationIdentified <- simulation$var.iden
storeResults <- c(checker(simulationIdentified$stepwise, simulationIdentified$truth),checker(simulationIdentified$anova, simulationIdentified$truth),checker(simulationIdentified$bma, simulationIdentified$truth),checker(simulationIdentified$bms, simulationIdentified$truth))
resultsMatrix[i,] <- storeResults
coefStoreStepwise = c(coefStoreStepwise, (simulation$coef.est)$stepwise)
}
SIMULATIONS = 5;
resultsMatrix = as.data.frame(matrix(NA, SIMULATIONS, 16))
names(resultsMatrix) = c("stepwiseTruePositive", "stepwiseFalsePositive", "stepwiseFalseNegative", "stepwiseTrueNegative",
"anovaTruePositive", "anovaFalsePositive", "anovaFalseNegative", "anovaTrueNegative",
"bmaTruePositive", "bmaFalsePositive", "bmaFalseNegative", "bmaTrueNegative",
"bmsTruePositive", "bmsFalsePositive", "bmsFalseNegative", "bmsTrueNegative")
coefStoreStepwise = list();
coefStoreANOVA = list();
coefStoreBMA = list();
coefStoreBMS = list();
for (i in 1:SIMULATIONS){
#
print(i);
simulation <- runSimulation(simulation.model.eae.3way, trainSize=200, testSize=200)
simulationIdentified <- simulation$var.iden
storeResults <- c(checker(simulationIdentified$stepwise, simulationIdentified$truth),checker(simulationIdentified$anova, simulationIdentified$truth),checker(simulationIdentified$bma, simulationIdentified$truth),checker(simulationIdentified$bms, simulationIdentified$truth))
resultsMatrix[i,] <- storeResults
coefStoreStepwise = c(coefStoreStepwise, i=(simulation$coef.est)$stepwise)
}
?c
c(1,c(2,3))
c(1,c(2,3), recursive = TRUE)
c(1,c(2,3), recursive = FALSE)
?list
x = list()
x[[1]]
?append
append(1,c(1,2))
append(1,list(1,2))
append(list(1),list(1,2))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
coefStorage
coefStorage[[1]]
